import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class ChatScreen extends StatelessWidget {
  final String doctorId; // Ajout de doctorId

  const ChatScreen({Key? key, required this.doctorId}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color.fromARGB(255, 239, 254, 248),
        title: Text(
          'Chat',
          style: TextStyle(
            color: Color.fromARGB(255, 68, 150, 131),
            fontSize: 20,
          ),
        ),
        actions: [
          IconButton(
            onPressed: () {
              FirebaseAuth.instance.signOut();
            },
            icon: Icon(
              Icons.exit_to_app,
              color: Color.fromARGB(255, 95, 207, 181),
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ChatMessages(
                doctorId: doctorId), // Passer doctorId à ChatMessages
          ),
          NewMessage(doctorId: doctorId),
        ],
      ),
    );
  }
}

class NewMessage extends StatefulWidget {
  final String doctorId; // Ajouter doctorId comme attribut

  const NewMessage({Key? key, required this.doctorId}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _NewMessageState();
  }
}

class _NewMessageState extends State<NewMessage> {
  var _messageController = TextEditingController();

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  void _submitMessage() async {
    final enteredMessage = _messageController.text;

    if (enteredMessage.trim().isEmpty) {
      return;
    }
    FocusScope.of(context).unfocus();
    _messageController.clear();

    final user = FirebaseAuth.instance.currentUser!;
    final username = user.displayName;
    final userImage = user.photoURL;

    // Utiliser l'ID du médecin comme destinataire
    FirebaseFirestore.instance.collection('Chat').add({
      'text': enteredMessage,
      'createdat': Timestamp.now(),
      'userId': user.uid,
      'username': username,
      'userImage': userImage,
      'recipientId': widget.doctorId, // Utiliser l'attribut doctorId
    });
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(left: 15, right: 1, bottom: 14),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              textCapitalization: TextCapitalization.sentences,
              autocorrect: true,
              enableSuggestions: true,
              decoration: InputDecoration(labelText: 'Send a message'),
            ),
          ),
          IconButton(
            icon: const Icon(
              color: Color.fromARGB(255, 95, 207, 181),
              Icons.send,
            ),
            onPressed: _submitMessage,
          ),
        ],
      ),
    );
  }
}

class ChatMessages extends StatelessWidget {
  final String doctorId;

  const ChatMessages({Key? key, required this.doctorId}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final user = FirebaseAuth.instance.currentUser!;
    return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
      stream: FirebaseFirestore.instance
          .collection('Chat')
          .where('recipientId', isEqualTo: doctorId)
          .orderBy(
            'createdat',
            descending: true,
          )
          .snapshots(),
      builder: (ctx, chatSnapshots) {
        if (chatSnapshots.connectionState == ConnectionState.waiting) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        }
        if (!chatSnapshots.hasData || chatSnapshots.data!.docs.isEmpty) {
          return const Center(
            child: Text('No messages found.'),
          );
        }
        if (chatSnapshots.hasError) {
          return const Center(
            child: Text('Something went wrong ....'),
          );
        }

        final loadedMessages = chatSnapshots.data!.docs;

        return ListView.builder(
          padding: const EdgeInsets.only(
            bottom: 40,
            left: 13,
            right: 13,
          ),
          reverse: true,
          itemCount: loadedMessages.length,
          itemBuilder: (ctx, index) {
            final chatMessages = loadedMessages[index].data();
            final currentMessageUserId = chatMessages['userId'];
            // Utiliser le constructeur nommé `next` ici
            return MessageBubble.next(
              userImage: chatMessages['userImage'],
              username: chatMessages['username'],
              message: chatMessages['text'],
              isMe: user.uid == currentMessageUserId,
            );
          },
        );
      },
    );
  }
}


class MessageBubble extends StatelessWidget {
  const MessageBubble.first({
    Key? key,
    required this.userImage,
    required this.username,
    required this.message,
    required this.isMe,
  })  : isFirstInSequence = true,
        super(key: key);

  const MessageBubble.next({
    Key? key,
    required this.message,
    required this.isMe, required userImage, required username,
  })  : isFirstInSequence = false,
        userImage = null,
        username = null,
        super(key: key);

  final bool isFirstInSequence;
  final String? userImage;
  final String? username;
  final String? message;
  final bool isMe;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Stack(
      children: [
        if (userImage != null)
          Positioned(
            top: 15,
            right: isMe ? 0 : null,
            child: CircleAvatar(
              backgroundImage: NetworkImage(userImage!),
              backgroundColor: theme.colorScheme.primary.withAlpha(180),
              radius: 23,
            ),
          ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 46),
          child: Row(
            mainAxisAlignment:
                isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
            children: [
              Column(
                crossAxisAlignment:
                    isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
                children: [
                  if (isFirstInSequence)
                    const SizedBox(
                      height: 18,
                    ),
                  if (username != null)
                    Padding(
                      padding: const EdgeInsets.only(
                        left: 13,
                        right: 13,
                      ),
                      child: Text(
                        username!,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                  Container(
                    decoration: BoxDecoration(
                        color: isMe
                            ? Colors.grey[300]
                            : theme.colorScheme.secondary.withAlpha(200),
                        borderRadius: BorderRadius.only(
                          topLeft: !isMe && isFirstInSequence
                              ? Radius.zero
                              : const Radius.circular(12),
                          topRight: isMe && isFirstInSequence
                              ? Radius.zero
                              : const Radius.circular(12),
                          bottomLeft: const Radius.circular(12),
                          bottomRight: const Radius.circular(12),
                        )),
                    constraints: const BoxConstraints(maxWidth: 200),
                    padding: const EdgeInsets.symmetric(
                      vertical: 10,
                      horizontal: 14,
                    ),
                    margin: const EdgeInsets.symmetric(
                      vertical: 4,
                      horizontal: 12,
                    ),
                    child: Text(
                      message!,
                      style: TextStyle(
                        height: 1.3,
                        color: isMe
                            ? Colors.black87
                            : theme.colorScheme.onSecondary,
                      ),
                      softWrap: true,
                    ),
                  ),
                ],
              )
            ],
          ),
        )
      ],
    );
  }
}
